version: "3.9"

services:
  renova-artifact-service:
    build:
      context: ..                       # repo root
      dockerfile: services/artifact-service/Dockerfile
    container_name: renova-artifact-service
    restart: unless-stopped
    env_file:
      - ../services/artifact-service/.env.example
    environment:
      # --- Mongo (override via shell/CI if needed) ---
      MONGO_URI: ${MONGO_URI:-mongodb+srv://sandeepk:sandeep@cluster0.tnbpi.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0}
      MONGO_DB: ${MONGO_DB:-renova}

      # --- RabbitMQ: SAME broker instance as RainaV2 (host-exposed) ---
      RABBITMQ_URI: ${RABBITMQ_URI:-amqp://raina:raina@host.docker.internal:5672/}

      # IMPORTANT: subscribe/publish to the SAME exchange as Raina
      RABBITMQ_EXCHANGE: ${RABBITMQ_EXCHANGE:-raina.events}

      # Routing key org segments (Renova publishes under 'renova')
      EVENTS_ORG: ${EVENTS_ORG:-renova}
      PLATFORM_EVENTS_ORG: ${PLATFORM_EVENTS_ORG:-platform}

      # Give Renova its OWN durable queue if consuming workspace events
      CONSUMER_QUEUE_WORKSPACE: ${CONSUMER_QUEUE_WORKSPACE:-platform.workspace.v1.renova}

      SERVICE_NAME: artifact-service
    ports:
      - "9011:9011"
    extra_hosts:
      - "host.docker.internal:host-gateway"

  renova-capability-registry:
    build:
      context: ..                       # repo root
      dockerfile: services/capability-registry/Dockerfile
    container_name: renova-capability-registry
    restart: unless-stopped
    env_file:
      - ../services/capability-registry/.env.example
    environment:
      # --- Mongo (Renova DB) ---
      MONGO_URI: ${MONGO_URI:-mongodb+srv://sandeepk:sandeep@cluster0.tnbpi.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0}
      MONGO_DB: ${MONGO_DB:-renova}

      # --- RabbitMQ: reuse Raina broker via host.docker.internal ---
      RABBITMQ_URI: ${RABBITMQ_URI:-amqp://raina:raina@host.docker.internal:5672/}
      # Use the SAME exchange so both stacks can see each other’s events
      RABBITMQ_EXCHANGE: ${RABBITMQ_EXCHANGE:-raina.events}

      # Renova’s org prefix for routing keys
      EVENTS_ORG: ${EVENTS_ORG:-renova}

      # Capability service needs artifact-service for CAM kind validation
      ARTIFACT_SERVICE_URL: ${ARTIFACT_SERVICE_URL:-http://renova-artifact-service:9011}

      SERVICE_NAME: renovacapability-registry
      # If your service reads PORT from env:
      PORT: ${CAPABILITY_SERVICE_PORT:-9012}
    ports:
      - "9012:9012"
    depends_on:
      - renova-artifact-service
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # NEW: COBOL parser tool (ProLeap + cb2xml)
  renova-proleap-cb2xml:
    build:
      context: ../services/tools/parsers/languages/cobol/proleap-cb2xml
      dockerfile: Dockerfile
      args:
        # optional: override the CLI jar name at build time if you prefer
        PROLEAP_CLI_JAR: proleap-cli.jar
    container_name: renova-proleap-cb2xml
    image: renova/proleap-cb2xml:latest
    restart: unless-stopped
    environment:
      PORT: "8080"
      LANDING_ZONE: "/landing_zone"      # for consistency if your service reads it
    ports:
      - "8080:8080"       # expose for local testing; internal callers can use the service name
    volumes:
      - renova_landing_shared:/landing_zone
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/docs"]
      interval: 15s
      timeout: 3s
      retries: 10
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # NEW: GitHub fetcher tool (SCM fetcher microservice)
  renova-github-fetcher:
    build:
      context: ../services/tools/fetchers/scm/github/github-fetcher
      dockerfile: Dockerfile
    container_name: renova-github-fetcher
    image: renova/github-fetcher:latest
    restart: unless-stopped
    environment:
      PORT: "8080"
      LANDING_ZONE: "/landing_zone"      # where clones land, shared with parser
      # (Optional) if you use GH tokens for private repos:
      # GIT_ASKPASS: /app/app/askpass.sh
      # GITHUB_TOKEN: ${GITHUB_TOKEN}
    ports:
      - "8081:8080"       # external port 8081 -> container 8080
    volumes:
      - renova_landing_shared:/landing_zone
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/docs"]
      interval: 15s
      timeout: 3s
      retries: 10
    extra_hosts:
      - "host.docker.internal:host-gateway"

volumes:
  # Shared landing zone volume so the fetcher and parser see the same files.
  renova_landing_shared:
